// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: users.sql

package database

import (
	"context"

	"github.com/gofrs/uuid"
)

const insertUser = `-- name: InsertUser :one
INSERT INTO users (github_email) VALUES ($1) RETURNING user_id, uuid, github_email
`

func (q *Queries) InsertUser(ctx context.Context, db DBTX, githubEmail string) (User, error) {
	row := db.QueryRowContext(ctx, insertUser, githubEmail)
	var i User
	err := row.Scan(&i.UserID, &i.Uuid, &i.GithubEmail)
	return i, err
}

const userByGithubEmail = `-- name: UserByGithubEmail :one
SELECT user_id, uuid, github_email FROM users WHERE github_email = $1 LIMIT 1
`

func (q *Queries) UserByGithubEmail(ctx context.Context, db DBTX, githubEmail string) (User, error) {
	row := db.QueryRowContext(ctx, userByGithubEmail, githubEmail)
	var i User
	err := row.Scan(&i.UserID, &i.Uuid, &i.GithubEmail)
	return i, err
}

const userByUUID = `-- name: UserByUUID :one
SELECT user_id, uuid, github_email FROM users WHERE uuid = $1 LIMIT 1
`

func (q *Queries) UserByUUID(ctx context.Context, db DBTX, argUuid uuid.UUID) (User, error) {
	row := db.QueryRowContext(ctx, userByUUID, argUuid)
	var i User
	err := row.Scan(&i.UserID, &i.Uuid, &i.GithubEmail)
	return i, err
}
