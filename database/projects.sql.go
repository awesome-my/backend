// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: projects.sql

package database

import (
	"context"

	"github.com/gobuffalo/nulls"
	"github.com/gofrs/uuid"
)

const countFilteredProjects = `-- name: CountFilteredProjects :one
SELECT count(*) FROM projects WHERE projects.name ILIKE $1 OR projects.slug ILIKE $2
`

type CountFilteredProjectsParams struct {
	Name string
	Slug nulls.String
}

func (q *Queries) CountFilteredProjects(ctx context.Context, db DBTX, arg CountFilteredProjectsParams) (int64, error) {
	row := db.QueryRowContext(ctx, countFilteredProjects, arg.Name, arg.Slug)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countProjects = `-- name: CountProjects :one
SELECT count(*) FROM projects
`

func (q *Queries) CountProjects(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, countProjects)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserProjects = `-- name: CountUserProjects :one
SELECT count(*) FROM projects WHERE user_id = $1
`

func (q *Queries) CountUserProjects(ctx context.Context, db DBTX, userID int32) (int64, error) {
	row := db.QueryRowContext(ctx, countUserProjects, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects WHERE project_id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, db DBTX, projectID int32) error {
	_, err := db.ExecContext(ctx, deleteProject, projectID)
	return err
}

const filteredProjectsByDescOffsetLimit = `-- name: FilteredProjectsByDescOffsetLimit :many
SELECT project_id, uuid, name, description, user_id, created_at, repository, website, slug FROM projects
WHERE projects.name ILIKE $1 OR projects.slug ILIKE $2
ORDER BY project_id DESC
OFFSET $3 LIMIT $4
`

type FilteredProjectsByDescOffsetLimitParams struct {
	Name   string
	Slug   nulls.String
	Offset int32
	Limit  int32
}

func (q *Queries) FilteredProjectsByDescOffsetLimit(ctx context.Context, db DBTX, arg FilteredProjectsByDescOffsetLimitParams) ([]Project, error) {
	rows, err := db.QueryContext(ctx, filteredProjectsByDescOffsetLimit,
		arg.Name,
		arg.Slug,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.Uuid,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
			&i.Repository,
			&i.Website,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filteredProjectsByOffsetLimit = `-- name: FilteredProjectsByOffsetLimit :many
SELECT project_id, uuid, name, description, user_id, created_at, repository, website, slug FROM projects
    WHERE projects.name ILIKE $1 OR projects.slug ILIKE $2
    OFFSET $3 LIMIT $4
`

type FilteredProjectsByOffsetLimitParams struct {
	Name   string
	Slug   nulls.String
	Offset int32
	Limit  int32
}

func (q *Queries) FilteredProjectsByOffsetLimit(ctx context.Context, db DBTX, arg FilteredProjectsByOffsetLimitParams) ([]Project, error) {
	rows, err := db.QueryContext(ctx, filteredProjectsByOffsetLimit,
		arg.Name,
		arg.Slug,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.Uuid,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
			&i.Repository,
			&i.Website,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertProject = `-- name: InsertProject :one
INSERT INTO projects (name, description, repository, website, user_id) VALUES ($1, $2, $3, $4, $5) RETURNING project_id, uuid, name, description, user_id, created_at, repository, website, slug
`

type InsertProjectParams struct {
	Name        string
	Description string
	Repository  nulls.String
	Website     nulls.String
	UserID      int32
}

func (q *Queries) InsertProject(ctx context.Context, db DBTX, arg InsertProjectParams) (Project, error) {
	row := db.QueryRowContext(ctx, insertProject,
		arg.Name,
		arg.Description,
		arg.Repository,
		arg.Website,
		arg.UserID,
	)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.Uuid,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
		&i.Repository,
		&i.Website,
		&i.Slug,
	)
	return i, err
}

const projectByUUID = `-- name: ProjectByUUID :one
SELECT project_id, uuid, name, description, user_id, created_at, repository, website, slug FROM projects WHERE uuid = $1 LIMIT 1
`

func (q *Queries) ProjectByUUID(ctx context.Context, db DBTX, argUuid uuid.UUID) (Project, error) {
	row := db.QueryRowContext(ctx, projectByUUID, argUuid)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.Uuid,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
		&i.Repository,
		&i.Website,
		&i.Slug,
	)
	return i, err
}

const projectsByAscOffsetLimit = `-- name: ProjectsByAscOffsetLimit :many
SELECT project_id, uuid, name, description, user_id, created_at, repository, website, slug FROM projects ORDER BY project_id OFFSET $1 LIMIT $2
`

type ProjectsByAscOffsetLimitParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) ProjectsByAscOffsetLimit(ctx context.Context, db DBTX, arg ProjectsByAscOffsetLimitParams) ([]Project, error) {
	rows, err := db.QueryContext(ctx, projectsByAscOffsetLimit, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.Uuid,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
			&i.Repository,
			&i.Website,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const projectsByDescOffsetLimit = `-- name: ProjectsByDescOffsetLimit :many
SELECT project_id, uuid, name, description, user_id, created_at, repository, website, slug FROM projects ORDER BY project_id DESC OFFSET $1 LIMIT $2
`

type ProjectsByDescOffsetLimitParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) ProjectsByDescOffsetLimit(ctx context.Context, db DBTX, arg ProjectsByDescOffsetLimitParams) ([]Project, error) {
	rows, err := db.QueryContext(ctx, projectsByDescOffsetLimit, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.Uuid,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
			&i.Repository,
			&i.Website,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects SET name = $1, description = $2, repository = $3, website = $4 WHERE project_id = $5 RETURNING project_id, uuid, name, description, user_id, created_at, repository, website, slug
`

type UpdateProjectParams struct {
	Name        string
	Description string
	Repository  nulls.String
	Website     nulls.String
	ProjectID   int32
}

func (q *Queries) UpdateProject(ctx context.Context, db DBTX, arg UpdateProjectParams) (Project, error) {
	row := db.QueryRowContext(ctx, updateProject,
		arg.Name,
		arg.Description,
		arg.Repository,
		arg.Website,
		arg.ProjectID,
	)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.Uuid,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
		&i.Repository,
		&i.Website,
		&i.Slug,
	)
	return i, err
}

const userProjectsByAscOffsetLimit = `-- name: UserProjectsByAscOffsetLimit :many
SELECT project_id, uuid, name, description, user_id, created_at, repository, website, slug FROM projects WHERE user_id = $1 ORDER BY project_id ASC OFFSET $2 LIMIT $3
`

type UserProjectsByAscOffsetLimitParams struct {
	UserID int32
	Offset int32
	Limit  int32
}

func (q *Queries) UserProjectsByAscOffsetLimit(ctx context.Context, db DBTX, arg UserProjectsByAscOffsetLimitParams) ([]Project, error) {
	rows, err := db.QueryContext(ctx, userProjectsByAscOffsetLimit, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.Uuid,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
			&i.Repository,
			&i.Website,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userProjectsByDescOffsetLimit = `-- name: UserProjectsByDescOffsetLimit :many
SELECT project_id, uuid, name, description, user_id, created_at, repository, website, slug FROM projects WHERE user_id = $1 ORDER BY project_id DESC OFFSET $2 LIMIT $3
`

type UserProjectsByDescOffsetLimitParams struct {
	UserID int32
	Offset int32
	Limit  int32
}

func (q *Queries) UserProjectsByDescOffsetLimit(ctx context.Context, db DBTX, arg UserProjectsByDescOffsetLimitParams) ([]Project, error) {
	rows, err := db.QueryContext(ctx, userProjectsByDescOffsetLimit, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.Uuid,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
			&i.Repository,
			&i.Website,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
