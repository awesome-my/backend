// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: projects.sql

package database

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/lib/pq"
)

const countProjects = `-- name: CountProjects :one
SELECT count(*) FROM projects
`

func (q *Queries) CountProjects(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, countProjects)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertProject = `-- name: InsertProject :one
INSERT INTO projects (name, description, tags, user_id) VALUES ($1, $2, $3, $4) RETURNING project_id, uuid, name, description, tags, user_id
`

type InsertProjectParams struct {
	Name        string
	Description string
	Tags        []string
	UserID      int32
}

func (q *Queries) InsertProject(ctx context.Context, db DBTX, arg InsertProjectParams) (Project, error) {
	row := db.QueryRowContext(ctx, insertProject,
		arg.Name,
		arg.Description,
		pq.Array(arg.Tags),
		arg.UserID,
	)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.Uuid,
		&i.Name,
		&i.Description,
		pq.Array(&i.Tags),
		&i.UserID,
	)
	return i, err
}

const projectByUUID = `-- name: ProjectByUUID :one
SELECT project_id, uuid, name, description, tags, user_id FROM projects WHERE uuid = $1 LIMIT 1
`

func (q *Queries) ProjectByUUID(ctx context.Context, db DBTX, argUuid uuid.UUID) (Project, error) {
	row := db.QueryRowContext(ctx, projectByUUID, argUuid)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.Uuid,
		&i.Name,
		&i.Description,
		pq.Array(&i.Tags),
		&i.UserID,
	)
	return i, err
}

const projectsByOffsetLimit = `-- name: ProjectsByOffsetLimit :many
SELECT project_id, uuid, name, description, tags, user_id FROM projects OFFSET $1 LIMIT $2
`

type ProjectsByOffsetLimitParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) ProjectsByOffsetLimit(ctx context.Context, db DBTX, arg ProjectsByOffsetLimitParams) ([]Project, error) {
	rows, err := db.QueryContext(ctx, projectsByOffsetLimit, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.Uuid,
			&i.Name,
			&i.Description,
			pq.Array(&i.Tags),
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
