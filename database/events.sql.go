// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: events.sql

package database

import (
	"context"
	"time"

	"github.com/gobuffalo/nulls"
	"github.com/gofrs/uuid"
	"github.com/lib/pq"
)

const countEvents = `-- name: CountEvents :one
SELECT count(*) FROM events
`

func (q *Queries) CountEvents(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, countEvents)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countEventsByTags = `-- name: CountEventsByTags :one
SELECT count(*) FROM events WHERE tags && $1
`

func (q *Queries) CountEventsByTags(ctx context.Context, db DBTX, tags []string) (int64, error) {
	row := db.QueryRowContext(ctx, countEventsByTags, pq.Array(tags))
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserEvents = `-- name: CountUserEvents :one
SELECT count(*) FROM events WHERE user_id = $1
`

func (q *Queries) CountUserEvents(ctx context.Context, db DBTX, userID int32) (int64, error) {
	row := db.QueryRowContext(ctx, countUserEvents, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events WHERE event_id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, db DBTX, eventID int32) error {
	_, err := db.ExecContext(ctx, deleteEvent, eventID)
	return err
}

const eventByUUID = `-- name: EventByUUID :one
SELECT event_id, uuid, name, description, tags, starts_at, ends_at, created_at, website, user_id FROM events WHERE uuid = $1 LIMIT 1
`

func (q *Queries) EventByUUID(ctx context.Context, db DBTX, argUuid uuid.UUID) (Event, error) {
	row := db.QueryRowContext(ctx, eventByUUID, argUuid)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.Uuid,
		&i.Name,
		&i.Description,
		pq.Array(&i.Tags),
		&i.StartsAt,
		&i.EndsAt,
		&i.CreatedAt,
		&i.Website,
		&i.UserID,
	)
	return i, err
}

const eventsByAscOffsetLimit = `-- name: EventsByAscOffsetLimit :many
SELECT event_id, uuid, name, description, tags, starts_at, ends_at, created_at, website, user_id FROM events ORDER BY event_id ASC OFFSET $1 LIMIT $2
`

type EventsByAscOffsetLimitParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) EventsByAscOffsetLimit(ctx context.Context, db DBTX, arg EventsByAscOffsetLimitParams) ([]Event, error) {
	rows, err := db.QueryContext(ctx, eventsByAscOffsetLimit, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.Uuid,
			&i.Name,
			&i.Description,
			pq.Array(&i.Tags),
			&i.StartsAt,
			&i.EndsAt,
			&i.CreatedAt,
			&i.Website,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const eventsByDescOffsetLimit = `-- name: EventsByDescOffsetLimit :many
SELECT event_id, uuid, name, description, tags, starts_at, ends_at, created_at, website, user_id FROM events ORDER BY event_id DESC OFFSET $1 LIMIT $2
`

type EventsByDescOffsetLimitParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) EventsByDescOffsetLimit(ctx context.Context, db DBTX, arg EventsByDescOffsetLimitParams) ([]Event, error) {
	rows, err := db.QueryContext(ctx, eventsByDescOffsetLimit, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.Uuid,
			&i.Name,
			&i.Description,
			pq.Array(&i.Tags),
			&i.StartsAt,
			&i.EndsAt,
			&i.CreatedAt,
			&i.Website,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const eventsByTagsAscOffsetLimit = `-- name: EventsByTagsAscOffsetLimit :many
SELECT event_id, uuid, name, description, tags, starts_at, ends_at, created_at, website, user_id FROM events WHERE tags && $1 ORDER BY event_id ASC OFFSET $2 LIMIT $3
`

type EventsByTagsAscOffsetLimitParams struct {
	Tags   []string
	Offset int32
	Limit  int32
}

func (q *Queries) EventsByTagsAscOffsetLimit(ctx context.Context, db DBTX, arg EventsByTagsAscOffsetLimitParams) ([]Event, error) {
	rows, err := db.QueryContext(ctx, eventsByTagsAscOffsetLimit, pq.Array(arg.Tags), arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.Uuid,
			&i.Name,
			&i.Description,
			pq.Array(&i.Tags),
			&i.StartsAt,
			&i.EndsAt,
			&i.CreatedAt,
			&i.Website,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const eventsByTagsDescOffsetLimit = `-- name: EventsByTagsDescOffsetLimit :many
SELECT event_id, uuid, name, description, tags, starts_at, ends_at, created_at, website, user_id FROM events WHERE tags && $1 ORDER BY event_id DESC OFFSET $2 LIMIT $3
`

type EventsByTagsDescOffsetLimitParams struct {
	Tags   []string
	Offset int32
	Limit  int32
}

func (q *Queries) EventsByTagsDescOffsetLimit(ctx context.Context, db DBTX, arg EventsByTagsDescOffsetLimitParams) ([]Event, error) {
	rows, err := db.QueryContext(ctx, eventsByTagsDescOffsetLimit, pq.Array(arg.Tags), arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.Uuid,
			&i.Name,
			&i.Description,
			pq.Array(&i.Tags),
			&i.StartsAt,
			&i.EndsAt,
			&i.CreatedAt,
			&i.Website,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEvent = `-- name: InsertEvent :one
INSERT INTO events (name, description, tags, website, starts_at, ends_at, user_id) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING event_id, uuid, name, description, tags, starts_at, ends_at, created_at, website, user_id
`

type InsertEventParams struct {
	Name        string
	Description string
	Tags        []string
	Website     nulls.String
	StartsAt    time.Time
	EndsAt      time.Time
	UserID      int32
}

func (q *Queries) InsertEvent(ctx context.Context, db DBTX, arg InsertEventParams) (Event, error) {
	row := db.QueryRowContext(ctx, insertEvent,
		arg.Name,
		arg.Description,
		pq.Array(arg.Tags),
		arg.Website,
		arg.StartsAt,
		arg.EndsAt,
		arg.UserID,
	)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.Uuid,
		&i.Name,
		&i.Description,
		pq.Array(&i.Tags),
		&i.StartsAt,
		&i.EndsAt,
		&i.CreatedAt,
		&i.Website,
		&i.UserID,
	)
	return i, err
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events SET name = $1, description = $2, tags = $3, website = $4, starts_at = $5, ends_at = $6 WHERE event_id = $7 RETURNING event_id, uuid, name, description, tags, starts_at, ends_at, created_at, website, user_id
`

type UpdateEventParams struct {
	Name        string
	Description string
	Tags        []string
	Website     nulls.String
	StartsAt    time.Time
	EndsAt      time.Time
	EventID     int32
}

func (q *Queries) UpdateEvent(ctx context.Context, db DBTX, arg UpdateEventParams) (Event, error) {
	row := db.QueryRowContext(ctx, updateEvent,
		arg.Name,
		arg.Description,
		pq.Array(arg.Tags),
		arg.Website,
		arg.StartsAt,
		arg.EndsAt,
		arg.EventID,
	)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.Uuid,
		&i.Name,
		&i.Description,
		pq.Array(&i.Tags),
		&i.StartsAt,
		&i.EndsAt,
		&i.CreatedAt,
		&i.Website,
		&i.UserID,
	)
	return i, err
}

const userEventsByAscOffsetLimit = `-- name: UserEventsByAscOffsetLimit :many
SELECT event_id, uuid, name, description, tags, starts_at, ends_at, created_at, website, user_id FROM events WHERE user_id = $1 ORDER BY event_id ASC OFFSET $2 LIMIT $3
`

type UserEventsByAscOffsetLimitParams struct {
	UserID int32
	Offset int32
	Limit  int32
}

func (q *Queries) UserEventsByAscOffsetLimit(ctx context.Context, db DBTX, arg UserEventsByAscOffsetLimitParams) ([]Event, error) {
	rows, err := db.QueryContext(ctx, userEventsByAscOffsetLimit, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.Uuid,
			&i.Name,
			&i.Description,
			pq.Array(&i.Tags),
			&i.StartsAt,
			&i.EndsAt,
			&i.CreatedAt,
			&i.Website,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userEventsByDescOffsetLimit = `-- name: UserEventsByDescOffsetLimit :many
SELECT event_id, uuid, name, description, tags, starts_at, ends_at, created_at, website, user_id FROM events WHERE user_id = $1 ORDER BY event_id DESC OFFSET $2 LIMIT $3
`

type UserEventsByDescOffsetLimitParams struct {
	UserID int32
	Offset int32
	Limit  int32
}

func (q *Queries) UserEventsByDescOffsetLimit(ctx context.Context, db DBTX, arg UserEventsByDescOffsetLimitParams) ([]Event, error) {
	rows, err := db.QueryContext(ctx, userEventsByDescOffsetLimit, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.Uuid,
			&i.Name,
			&i.Description,
			pq.Array(&i.Tags),
			&i.StartsAt,
			&i.EndsAt,
			&i.CreatedAt,
			&i.Website,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
